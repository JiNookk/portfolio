/* Global
css에서 변수를 지정해주는 작업 */
:root {
  /* Color */
  --color-white: #ffffff;
  --color-light-white: #eeeeee;
  --color-dark-white: #bdbdbd;
  --color-pink: #fe918d;
  --color-dark-pink: #ff6863;
  --color-black: #4d4d4d;
  --color-dark-grey: #4d4d4d;
  --color-grey: #616161;
  --color-light-grey: #7c7979;
  --color-blue: #73aace;
  --color-yellow: #fff7d1;
  --color-orange: #feb546;
  --color-black: #000000;

  /* Font size */
  --font-large: 48px;
  --font-medium: 28px;
  --font-regular: 18px;
  --font-small: 16px;
  --font-micro: 14px;

  /* Font weight */
  --weight-bold: 700;
  --weight-semi-bold: 600;
  --weight-regular: 400;

  /* Size */
  --size-border-radius: 4px;

  /* Animation */
  --animation-duration: 300ms;
}

/* Universal tags 
    모든 태그들의 박스사이즈를 border로 할것임.*/
* {
  box-sizing: border-box;
}
body {
  /* 바디에 기본적으로 주어진 margin을 없앤다 */
  margin: 0;
  /* 마우스 커서의 리액션을 지정한다 */
  cursor: default;
}

a {
  text-decoration: none;
  color: var(--color-white);
}

ul {
  list-style: none;
  padding-left: 0;
}

/* Typography */
h1 {
  font-size: var(--font-large);
  font-weight: var(--weight-bold);
  color: var(--color-black);
  margin: 16px 0px 0 0;
}

h2 {
  font-size: var(--font-medium);
  font-weight: var(--weight-semi-bold);
  color: var(--color-black);
  margin: 8px 0;
}

h3 {
  font-size: var(--font-regular);
  font-weight: var(--weight-regular);
  color: var(--color-black);
  margin: 8px 0;
}

p {
  font-size: var(--font-regular);
  font-weight: var(--weight-regular);
  color: var(--color-black);
  margin: 4px 0;
}

/* 버튼의 기본속성 없애기 */
button {
  background-color: transparent;
  cursor: pointer;
  border: none;
  outline: none;
}

/* Navbar */
/* 왜 navbar의 하얀색이랑 하이라이트가 없지나는? */
#navbar {
  position: fixed;
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px;
  background-color: transparent;
  transition: all var(--animation-duration) ease-in-out;
  /* 가장 상위에 둘 우선순위를 지정 */
  z-index: 1;
}

/* 예기지않은 property가 발생하면 css > html > JS를 찾아볼것.
    이번에 밑에 붙은 JS 내용때문에 1시간 넘게 허비했다. */
#navbar.navbar--dark {
  background-color: var(--color-pink);
  padding: 8px;
}

.navbar__menu {
  display: flex;
}

.navbar__logo {
  font-size: var(--font-medium);
  font-weight: var(--weight-semi-bold);
  color: var(--color-white);
}

.navbar__menu__item {
  padding: 8px, 12px;
  margin: 0 4px;
  /* pointer : 호버되었을때 커서가 손모양으로 변함 */
  cursor: pointer;
  color: var(--color-white);
  border: 1px solid transparent;
  border-radius: var(--size-border-radius);
}

/* var쓸때 띄어쓰기 조심!!!! */
.navbar__menu__item.active {
  border-radius: var(--size-border-radius);
}

.navbar__menu__item:hover {
  background-color: var(--color-dark-pink);
  border-color: var(--color-white);
}

.navbar__toggle-btn {
  position: absolute;
  top: 24px;
  right: 38px;
  font-size: 24px;
  color: var(--color-white);
  /* 평소엔 없다가 화면이 작아지면 미디어쿼리로 구현해야 하므로 display : none */
  display: none;
}

/* Home */
#home {
  /* 홈 섹션의 배경 전체를 설정 */
  /* 배경을 반응형으로 만들기 위해 center/cover/nopeat를 준다. */
  background: url('imgs/homebackground.jpg') center/cover no-repeat;
  padding: 40px;
  padding-top: 100px;
  /* 아이템이 수직으로 차례대로 깔리니깐 수평으로 중심을 맞추기 위해 align-items을 쓴다.; */
  text-align: center;
}

#h {
  opacity: 0;
}

.home__avatar {
  width: 250px;
  height: 250px;
  border-radius: 50%;
  border: 2px solid var(--color-light-white);
}

.home__title,
.home__description {
  color: var(--color-white);
}

.home__contact {
  color: var(--color-white);
  font-size: var(--font-regular);
  font-weight: var(--weight-bold);
  margin: 24px;
  padding: 8px 12px;
  border: 2px solid var(--color-white);
  border-radius: var(--size-border-radius);
}

/* Section common  */
.section {
  padding: 50px;
  text-align: center;

  /* text-align으로 가운데 정렬이 안될 경우를 대비해 margin을 양옆에 동일하게 분배 */
  margin: auto;
}

.section__container {
  /* 최대로 커질 수 있는 너비 
  이렇게 따로 빼서 써야 배경색 지정시 문제가 발생하지 않는다.*/
  max-width: 1200px;
  margin: auto;
}

/* About */
.about__majors {
  /* 플렉스 박스는 기본적으로 수평정렬 */
  display: flex;
  /* 등간격의 기본축 정렬을 하고 싶을때 */
  justify-content: space-between;
  margin: 80px, 0;
}

.major__icon {
  width: 170px;
  height: 170px;
  /* line-height을 높이만큼 주게되면 요소가 중간에 오게 된다.; */
  line-height: 170px;
  /* 만들면서 확인하기 어렵기 때문에 색지정해서 영역확인하면 좋다! */
  /* background-color: yellow; */
  font-size: 70px;
  /* 개발자도구를 이용해서 마우스를 대보면 margin이 분홍색으로 표시된다!
  치우쳐진 마진을 발견하면 margin : auto를  쓸것 */
  margin: auto;
  color: var(--color-blue);
  border: 1px solid var(--color-blue);
  border-radius: 50%;
  margin-bottom: 16px;
}

.major__title,
.major__description {
  color: var(--color-dark-grey);
}

.major__description {
  font-size: var(--font-small);
}

/* 마우스를 가져다 댈때 동작을 원한다면 hover
major icon이 아닌 i개체(아이콘)에 올라갔을 때 반응을 원하면 i도 추가
    이렇게하면 안의 회전, 확대도 아이콘에서만 발생 */
.major__icon:hover i {
  color: var(--color-pink);
  /* 가져다 댈때 회전과 확대가 발생 */
  transform: rotate(-30deg) scale(1.2);
}

.major__icon i {
  /* 애니메이션은 300ms가 딱이야! 아니면 너무 빠르거나 답답 */
  transition: all var(--animation-duration) ease;
}

.about__jobs {
  margin: 80px 0;
}
/* 원래 div태그의 기본값 : 수직
flex : 수평
>> 이 두개를 잘 조합해서 우리가 원하는것을 버무려야 한다. */
.job {
  display: flex;
  align-items: center;
}

.job__description {
  margin: 0 16px;
  text-align: left;
}

.job__name {
  font-size: var(--font-small);
}

.job__period {
  font-size: var(--font-micro);
}

#skills {
  background-color: var(--color-yellow);
}

/* 개발자 도구를 들어가 보면 사이즈가 작아서 옆으로 안퍼지는지 
마진때문에 옆으로 안퍼지는지 확인할 수 있다. 마진 : 분홍, 사이즈 : 파랑 */
.skillset {
  display: flex;
  background-color: var(--color-light-grey);
  color: var(--color-light-white);
  /* 밸류값줄때 절대 ,넣지말것!!!! */
  margin: 20px 0;
}

/* 사이즈가 남은 요소들의 위치를 퍼뜨리기 위한 코드 */
.skillset__left {
  flex-basis: 60%;
  background-color: var(--color-dark-grey);
  /* 박스 내부 개체들의 간격을 띄울때 : padding
  박스의 간격을 띄울 때 : margin */
  padding: 20px 40px;
}

.skillset__right {
  flex-basis: 40%;
}

.tools {
  background-color: var(--color-grey);
}

.skillset__title {
  color: var(--color-light-white);
}

.skill__description {
  display: flex;
  justify-content: space-between;
}

.skill__bar {
  width: 100%;
  height: 3px;
  background-color: var(--color-grey);
}

.skill {
  margin-bottom: 32px;
}

.skill__value {
  /* 요놈은 html태그안에서 각각 정의되야 한다. 
  나중에는 JS로 동적처리할 것임. */
  /* width: 70%; */
  height: 3px;
  background-color: var(--color-orange);
}

.tools,
.etc {
  padding: 20px;
}

.category__btn {
  border: 1px solid var(--color-dark-white);
  border-radius: var(--size-border-radius);
  font-size: var(--font-regular);
  padding: 8px 48px;
}

.category__btn.active,
.category__btn:hover {
  background-color: var(--color-pink);
  color: var(--color-white);
}

/* 카테고리
  버튼이
  액티브인
  상태의
  카테고리
  카운트와
  카테고리
  버튼에
  마우스가
  올라왔을때
  안에있는
  카테고리
  카운트
  일때만
  동작 */
.category__btn.active .category__count,
.category__btn:hover .category__count {
  opacity: 1;
  top: 0;
}

.category__count {
  background-color: var(--color-orange);
  border-radius: 50%;
  color: var(--color-white);
  width: 24px;
  height: 24px;
  /* span은 기본적으로 안의 내용을 꽉채워서 적용시키기 때문에 
      inline-block으로 채워주는게 좋다! */
  display: inline-block;
  position: relative;
  /* top을 이용해 위치를 지정할 수 있다. */
  top: -20px;
  left: 4px;
  opacity: 0;
  transition: all var(--animation-duration) ease;
}

.work__projects {
  margin-top: 30px;
  display: flex;
  /* wrap : 수평으로 나열된 아이템들이 화면에 꽉차면 아래로 내려가게 해주는 기능 */
  flex-wrap: wrap;
  justify-content: center;
  opacity: 1;
  transition: all var(--animation-duration) ease-out;
}

.work__projects.anim-out {
  opacity: 0;

  transform: scale(0.96) translateY(40px);
}

.project {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 280px;
  height: 250px;
  margin: 2px;
  background-color: var(--color-light-white);
}

.project.invisible {
  display: none;
}
/* 부모박스의 크기를 넘지않도록 100%할당 */
.project__img {
  max-width: 100%;
  min-height: 100%;
}

.project__description {
  position: absolute;
  top: 0;
  left: 0;
  background-color: var(--color-black);
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  /* 투명도 지정 */
  opacity: 0;
  /* 액티브됐을 때 콤보 : transition ~ 태그.active(아니면 hover) .태그 ~ */
  transition: all var(--animation-duration) ease-in;
  /* translateY는 +가 아래방향 */
  transform: translateY(10px);
}

.project:hover .project__description {
  opacity: 0.8;
  transform: translateY(0px);
}

/* 클래스 지정을 하지 않은 태그도 부모가 클래스로 묶여있으면
    이런 식으로 지정이 가능하다! */
.project__description h3 {
  color: var(--color-orange);
}

/* h3태그 다음에 간단한 작업을 하고 싶을 때  */
.project__description h3:after {
  content: '';
  display: block;
  position: relative;
  left: 50%;
  width: 50px;
  height: 2px;
  transform: translateX(-50%);
  margin-top: 8px;
  background-color: var(--color-dark-white);
}

#testimonials {
  background-color: var(--color-light-white);
}

.testimonials {
  margin: 40px;
}

.testimonial {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin: 40px 0;
}

/* 이미지 크기 : 그냥 픽셀값을 지정해줌. %말고 */
.testimonial__avatar {
  border-radius: 50%;
  width: 150px;
  height: 150px;
}

/* 클래스 태그가 여러개 중복 될 경우 홀, 짝수를 구분하는 코드 */
.testimonial__avatar:nth-child(odd) {
  margin-right: 40px;
}

.testimonial__avatar:nth-child(even) {
  margin-left: 40px;
}

/* 안의 내용이 무한하게 늘어나는 이유 : max-width를 적용시키지 않았기 때문이다.
    따라서 section container를 적용시켜주면 해결됨! */
.testimonial__speech-bubble {
  padding: 18px;
  background-color: var(--color-white);
  border-radius: var(--size-border-radius);
  /* 너비와 높이를 지정하지 않아야 알아서 글자에 맞춰 박스크기가 지정된다. */
  /* width: 100%;
  height: 150px; */
  /* justify-content: center;
  align-items: center; */
}

.name a {
  color: var(--color-pink);
}

#contact {
  background-color: var(--color-pink);
  justify-content: space-between;
}

.contact__title,
.contact__email,
.contact__rights {
  color: var(--color-white);
  margin: 20px;
}

.contact__links {
  font-size: var(--font-large);
  margin: 24px, 0;
}

/* i: hover와 hover i랑 다르니깐 꼭 순서 기억하기!! */
.contact__links i:hover {
  transform: rotate(-30deg) scale(1.2);
  color: var(--color-yellow);
}

/* arrow up */

/* 아이콘 말고 위 클래스에서 폰트사이즈랑 컬러를 줘도 된다! */
.arrow__up {
  position: fixed;
  right: 50px;
  bottom: 50px;
  width: 70px;
  height: 70px;
  font-size: var(--font-large);
  color: var(--color-white);
  background-color: var(--color-pink);
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  /* border: 1px solid var(--color-white); 굳이 필요없다. */

  color: var(--color-white);
  cursor: pointer;
  z-index: 1;
  transition: all var(--animation-duration) ease;
}

/* display : none -> block(기본값) 으로 변경해주어야 
    반응불가능한 녀석에서 반응 가능한 녀석으로 변한다. */

.arrow__up.visible {
  opacity: 1;
  pointer-events: auto;
}

/* 우리가 화면을 최대로 키웠을 때 박스가 끝까지 늘어나는 것을 멈추려면?
  max-width를 준다! >> container까지 해서 준다*/

/* 토글에 관한내용은 반응형 내용이므로 미디어 쿼리구문 안에서 
    적는게 맞지 않나? >> 미디어 쿼리 안에서는 최소한의 내용만
    들어가야 한다. 
    가능하면 스타일링과 관련된 내용은 본문에서 만들고 
    차이점만 미디어 쿼리 내부에서 구현하기 */
@media screen and (max-width: 768px) {
  .navbar__toggle-btn {
    display: block;
  }

  #navbar {
    flex-direction: column;
    align-items: flex-start;
    background-color: var(--color-pink);
  }

  /* 중앙으로 왜 안올까?
      개발자 도구로 확인 >> 마진이 없다면 사이즈를 100%로 늘리기 */
  /* width : 100%인데 적용 안될때 ? >> 부모태그의 사이즈를 초과할수 없기 때문
          부모 태그에도 width를 100%주던가 중복된 부모태그를 없애면 해결.
          >> 쓸데없는 중복은 잘 제거하도록 하자! */
  .navbar__menu {
    width: 100%;
    flex-direction: column;
    text-align: center;
    display: none;
  }

  .navbar__menu.clicked {
    display: block;
  }

  .about__majors {
    flex-direction: column;
  }

  .major {
    margin-bottom: 38px;
  }

  .skillset {
    flex-direction: column;
  }

  .project {
    /* 화면을 가득채우는 flex구문 */
    flex-grow: 1;
  }

  .testimonial__avatar {
    width: 80px;
    height: 80px;
  }
}
